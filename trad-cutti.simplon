%%% Carga la VT de la clase A
        SetLabel VTA, Libre                                     %Creo la etiqueta para la VT de A
        SetD Libre, initA         @VTA: direccion de initA      %Pongo en la VTA la direccion la version de init que usa A (respetando el offset de met1!)
        SetD Libre+1, m1A       @VTA: direccion de m1A      %Pongo en la VTA la direccion la version de m1 que usa A (respetando el offset de met1!)
        SetD Libre+2, m2A        @VTA: direccion de m2A     %Pongo en la VTA la direccion la version de m2 que usa A(respetando el offset de met1!)
        SetLibre Libre+4                                        %Actualizo Libre segun el tamaño de la VTA
        SetActual Libre                                         %Actualizo actual tambien

%%% Carga la VT de la clase B
        SetLabel VTB, Libre                                  %Creo la etiqueta para la VT de B
        SetD Libre, initB       @VTB:direccion de initB
        SetD Libre+1, m2B       @VTB:direccion de m2B
        SetLibre Libre+3                                        %Actualizo Libre segun el tamaño de la VTB
        SetActual Libre                                         %Actualizo actual tambien
%%% Carga la VT de la clase C
        SetLabel VTC, Libre                                     %Creo la etiqueta para la VT de C
        SetD Libre, initC         @VTC: direccion de initC      %Pongo en la VTA la direccion la version de init que usa C (respetando el offset de met1!)
        SetD Libre+1, m1C       @VTC: direccion de m1C      %Pongo en la VTA la direccion la version de m1 que usa C (respetando el offset de met1!)
        SetLibre Libre+3                                        %Actualizo Libre segun el tamaño de la VTC
        SetActual Libre                                         %Actualizo actual tambien
%%% Carga la VT de la clase D
        SetLabel VTD, Libre                                     %Creo la etiqueta para la VT de D
        SetD Libre, initD         @VTD: direccion de initD      %Pongo en la VTA la direccion la version de init que usa D (respetando el offset de met1!)
        SetD Libre+1, m2D       @VTD: direccion de m1D      %Pongo en la VTA la direccion la version de m2 que usa D (respetando el offset de met1!)
        SetLibre Libre+3                                        %Actualizo Libre segun el tamaño de la VTD
        SetActual Libre                                         %Actualizo actual tambien

%%% Carga la VT de la clase Principal
        SetLabel VTPrincipal, Libre                                     %Creo la etiqueta para la VT de D
        SetLibre Libre+1                                        %Actualizo Libre segun el tamaño de la VTD
        SetActual Libre                                         %Actualizo actual tambien


%%%-----------------------------------------------------------------------------

%%%-------------Codigo de Incializacion (Llamada a main)------------------------
%%% Llama a main y finaliza
        SetD Libre, pc+5            @PTR    %Guardo puntero de retorno caigo en ??
        SetD Libre+1, actual        @ED     %Guardo enlace dinamico %main es estatico asi que no tien this!                                    
        SetActual Libre                     %Muevo actual para que apunte al RA que acabo de crear para main
        SetLibre Actual+5                   %Muevo libre segun el tamaño del RA de main (considerando las vars locales)
        Jump Main                           %Salto al codigo de main
        Halt                                %Cuando termino de ejecutar main finalizo


%%%--------------------Traduccion de init de la clase B-------------------------
initB   SetD Libre, pc+6                %PR
        SetD Libre+1, Actual            %ED
        SetD Libre+2, D[Actual+2]       %this

        SetActual Libre                 %Actualizo Actual
        SetLibre Actual+3               %Actualizo libre apuntando dsp del this

        Jump initA                      %Salto al codigo de initA
        SetH D[Actual+2]+3, 10          %v3 = 10

        SetLibre Actual                 %Retorno de initB
        SetActual D[Libre+1]            %same
        Jump D[Libre]                   %same

%%%--------------------Traduccion de m2B de la clase B-------------------------
m2B     SetLibre Libre+1                                        %Espacio de retorno del this.m2()
        SetD Libre, PC+7                                        %PR     
        SetD Libre+1, Actual                                    %ED
        SetD Libre+2, D[Actual+2]                               %this

        SetActual Libre                                         %Actualizo actual
        SetLibre Actual+4                                       %Actualizo libre apuntando al final del RA
        Jump m2A                                                %Salto al codigo de m2a
        SetD Actual+4, D[Libre-1]                               %aux = this.m2() ->m2a
        SetD Actual-1, H[D[Actual+2]+3] + D[Actual+4]/2         %return v3 + aux/2
        SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]

%%%----------------------------------CLASE D TRADUCCION-------------------------
%%%--------------------Traduccion de init de la clase D-------------------------
initD   SetD Libre, PC+6                                 %PR
        SetD Libre+1, Actual                            %ED
        SetD Libre+2, D[Actual+2]                       %this

        SetActual Libre                                 %Actualizo actual para que arranque en el PR del RA
        SetLibre Actual+3                               %Actualizo libre para que apunte al fin del RA      
        Jump initC
        
        SetH D[Actual+2]+1, D[Actual+3]+D[Actual+3]+D[Actual+4]+4       %v1 = x + y + 4
        SetH D[Actual+2]+4, D[Actual+3]                                 %v4 = x
        SetH D[Actual+2]+5, D[Actual+3]+D[Actual+4]                     %v5 = x+y

        SetD D[Actual+2]+6, PO          %o1 = new B()
        SetH PO, VTB                    %le agrego la VT al nuevo objeto
        SetPO PO+4                      %muevo el PO para que entre el INST de B

        SetD Libre PC+6
        SetD Libre+1, Actual
        SetD Libre+2, D[Actual+2]

        SetActual Libre
        SetLibre Actual+3

        Jump initB                      %salto al codigo de init B

        SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]

%%%--------------------Traduccion de m2 de la clase D-------------------------
m2D     SetLibre Libre+1                %return de m2
        SetD Libre, PC+                 %PR
        SetD Libre+1, Actual            %ED
        SetD Libre+2, D[Actual+2]       %this
        SetD Libre+3, H[D[Actual+2]+1] + H[D[Actual+2]+4] + (H[D[Actual+2]+5])/2         %v1+v4+v5/2
        
        SetActual Libre
        SetLibre Actual+5               
        Jump m2b
        SetD Actual+4, D[Libre-1]       %aux= o1.m2(v1+v4+v5/2)
        
        SetLibre Libre+1                %return de m1
        SetD Libre, PC+                 %PR
        SetD Libre+1, Actual            %ED
        SetD Libre+2, D[Actual+2]       %this
        SetD Libre+3, D[Actual+4]+ 11* H[D[Actual+2]+3] %aux + 11*v3

        SetActual Libre
        SetLibre Actual+4
        Jump m1A
        SetD Actual+3, D[Libre-1]       %j= this.m1(aux + 11*v3)
        
        SetD Actual-1, Actual+3
        SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]
