%%% Carga la VT de la clase A
        SetLabel VTA, Libre                                     %Creo la etiqueta para la VT de A
        SetD Libre, initA         @VTA: direccion de initA      %Pongo en la VTA la direccion la version de init que usa A (respetando el offset de met1!)
        SetD Libre+1, m1A       @VTA: direccion de m1A      %Pongo en la VTA la direccion la version de m1 que usa A (respetando el offset de met1!)
        SetD Libre+2, m2A        @VTA: direccion de m2A     %Pongo en la VTA la direccion la version de m2 que usa A(respetando el offset de met1!)
        SetLibre Libre+4                                        %Actualizo Libre segun el tamaño de la VTA
        SetActual Libre                                         %Actualizo actual tambien

%%% Carga la VT de la clase B
        SetLabel VTB, Libre                                  %Creo la etiqueta para la VT de B
        SetD Libre, initB       @VTB:direccion de initB
        SetD Libre+1, m1A       @VTB:direccion de m1A
        SetD libre+2, m2A        @VTB:direccion de m2A
        SetD Libre+3, m2B       @VTB:direccion de m2B
        SetD libre+4, VTA       @VTB:direccion de VTA
        SetLibre Libre+6                                        %Actualizo Libre segun el tamaño de la VTB
        SetActual Libre                                         %Actualizo actual tambien
%%% Carga la VT de la clase C
        SetLabel VTC, Libre                                     %Creo la etiqueta para la VT de C
        SetD Libre, initC         @VTC: direccion de initC      %Pongo en la VTA la direccion la version de init que usa C (respetando el offset de met1!)
        SetD Libre+1, m1C       @VTC: direccion de m1C      %Pongo en la VTA la direccion la version de m1 que usa C (respetando el offset de met1!)
        SetD Libre+2, m2A       @VTC:direccion de m2A
        SetD Libre+3, m2B       @VTC:direccion de m2B
        SetD Libre+4, VTB       @VTC:direccion de VTB
        SetLibre Libre+6                                        %Actualizo Libre segun el tamaño de la VTC
        SetActual Libre                                         %Actualizo actual tambien
%%% Carga la VT de la clase D
        SetLabel VTD, Libre                                     %Creo la etiqueta para la VT de D
        SetD Libre, initC         @VTD: direccion de initC      %Pongo en la VTA la direccion la version de init que usa D (respetando el offset de met1!)
        SetD Libre+1, m1C       @VTD: direccion de m1C      %Pongo en la VTA la direccion la version de m2 que usa D (respetando el offset de met1!)
        SetD Libre+2, m2D       @VTD:direccion de m2D
        SetD Libre+3, m2B       @VTD:direccion de m2B
        SetD Libre+4, initD     @VTD:direccion de initD
        SetD Libre+5, VTC       @VTD:direccion de VTC
        SetLibre Libre+7                                        %Actualizo Libre segun el tamaño de la VTD
        SetActual Libre                                         %Actualizo actual tambien

%%% Carga la VT de la clase Principal
        SetLabel VTPrincipal, Libre           @VTP                          %Creo la etiqueta para la VT de D
        SetLibre Libre+1                                      %Actualizo Libre segun el tamaño de la VTD
        SetActual Libre                                         %Actualizo actual tambien


%%%-----------------------------------------------------------------------------

%%%-------------Codigo de Incializacion (Llamada a main)------------------------
%%% Llama a main y finaliza
        SetD Libre, pc+5            @PTR    %Guardo puntero de retorno caigo al finalizar el Jump Main en Halt
        SetD Libre+1, actual        @ED     %Guardo enlace dinamico %main es estatico asi que no tien this!                                    
        SetActual Libre                     %Muevo actual para que apunte al RA que acabo de crear para main
        SetLibre Actual+5                   %Muevo libre segun el tamaño del RA de main (considerando las vars locales)
        Jump Main                           %Salto al codigo de main
        Halt                                %Cuando termino de ejecutar main finalizo

%%%--------------------Traduccion de init de la clase A-------------------------
initA           SetH D[Actual+2]+1,2     @v1=2            %Guardo el valor del parametro p en x  a traves de this en el RA
                SetH D[Actual+2]+2,0  @v2=0         %Guardo el valor del parametro p*5 en y  a traves de this en el RA
                SetLibre Actual                                     %Limpio la memoria del RA de init
                SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
                Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno
%%%-----------------------------------------------------------------------------

%%%----------------------------------CLASE A TRADUCCION-------------------------

%%%--------------------Traduccion de m1 de la clase A-------------------------
m1A             SetD Actual+4,0     @i=0            %Guardo el valor 0 en la variable i
                SetD Actual+5,1  @seguir=true         %Guardo el valor true '1' en la variable seguir
beginWhileM1A   JumpT pc+9,!(D[Actual+5])  @seguir   %Condicion del while si es verdadera la condicion salta al final del while
                JumpT pc+8, !(D[Actual+4]<D[Actual+3]) @ & i < max
                JumpT pc+3, ((H[D[Actual+2]+1])+ D[Actual+4])> (H[(D[Actual+2]+2)] * D[Actual+4]) @ v1 + i > v2 * i     %Condicion del if si es verdadera salta al then 
elseM1A         SetD Actual-1,(H[D[Actual+2]+1])*(H[D[Actual+2]+2]) @return v1*v2  %Else del if entra si la condicion de arriba es falsa ya que no realiza el salto
                Jump pc+7  %Jump al retorno ya que realiza un return entonces corta la ejecucion del while y sale del if.
thenM1A         SetH D[Actual+2]+2,H[D[Actual+2]+2]+D[Actual+4] @v2 = v2 + i %Empieza la ejecucion del then del if asignandole el nuevo valor a v2
                SetH D[Actual+2]+1,H[D[Actual+2]+1]+1 @v1 = v1 + 1   %Actualiza el valor de v1
                SetD Actual+5,(H[D[Actual+2]+1])!=(H[D[Actual+2]+2]) @seguir = v1 != v2;  %actualiza el valor de seguir
                SetD Actual+4,D[Actual+4]+1 @i = i+1;   %Actualiza el valor de i 
                Jump beginWhileM1A                      %Salta al comienzo del while sin condicion ya que realiza la comparacion en JumpT del while.
endWhileM1A     SetD Actual-1, (H[D[Actual+2]+1])+(H[D[Actual+2]+2])  @return de v1+v2     %retorno del metodo 
retM1A          SetLibre Actual                                     %Limpio la memoria del RA de m1
                SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
                Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno
%%%-----------------------------------------------------------------------------

%--------------------------Traduccion de m2 de la clase A-----------------------------
m2A             SetLibre Libre+1  @Lugar de retorno
                SetD Libre, PC+7 @PR
                SetD Libre+1, Actual   @ED
                SetD Libre+2, D[Actual+2] @this
                SetD Libre+3, (H[D[Actual+2]+1])*3 @param v1*3
                SetActual Libre               %Actualizo Actual par que apunte al RA de m1 nuevo           
                SetLibre Libre+6              %Actalizo el libre con el tamanio del RA de m1
                Jump D[H[D[Actual+2]]+1] %salto al codigo m1 de a
                SetD Actual+3,D[Libre-1] @j=m1(v1*3)
                SetLibre Libre-1
                SetD Actual-1, D[Actual+3] @return j;
                SetLibre Actual                                     %Limpio la memoria del RA de m2
                SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
                Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno


%%%----------------------------------CLASE B TRADUCCION--------------------------------
%%%--------------------Traduccion de init de la clase B-------------------------
initB   SetD Libre, pc+6                @PR
        SetD Libre+1, Actual            @ED
        SetD Libre+2, D[Actual+2]       @this

        SetActual Libre                 %Actualizo Actual
        SetLibre Actual+3               %Actualizo libre apuntando dsp del this

        Jump D[VTA]                      %Salto al codigo de initA
        SetH D[Actual+2]+3, 10  @v3=10    

        SetLibre Actual                 %Retorno de initB
        SetActual D[Libre+1]            %same
        Jump D[Libre]                   %same

%%%--------------------Traduccion de m2B de la clase B-------------------------
m2B     SetLibre Libre+1                                        @Espacio de retorno del this.m2()
        SetD Libre, PC+6                                        @PR     
        SetD Libre+1, Actual                                    @ED
        SetD Libre+2, D[Actual+2]                               @this

        SetActual Libre                                         %Actualizo actual
        SetLibre Actual+4                                       %Actualizo libre apuntando al final del RA
        Jump D[H[D[Actual+2]]+2]                                     %Salto al codigo de m2a
        SetD Actual+4, D[Libre-1]                               @aux = this.m2() ->m2a
        SetLibre Libre-1
        SetD Actual-1, H[D[Actual+2]+3] + (D[Actual+4]/2)         @return v3 + aux/2
        SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]


%%%----------------------------------CLASE C TRADUCCION-------------------------
%--------------------------Traduccion de init de la clase C-----------------------------
initC           SetD Libre, PC+6 @PR
                SetD Libre+1, Actual @ED
                SetD Libre+2, D[Actual+2] @this
                SetActual Libre
                SetLibre Actual+3
                Jump D[VTB]
                SetH D[Actual+2]+3, 2 @v3=2
                SetLibre Actual                                     %Limpio la memoria del RA de m2
                SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
                Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno

%--------------------------Traduccion de m1 de la clase C-----------------------------

m1C             JumpT thenM1C,D[Actual+3]>= ((H[D[Actual+2]+1])+(H[D[Actual+2]+2])+(H[D[Actual+2]+3]))   @ max >= (v1 + v2 + v3) 
                JumpT thenM1C, (D[Actual+3]==2)  @  | max == 2   
elseM1C         SetLibre Libre+1
                SetD Libre, PC+7 @PR
                SetD Libre+1, Actual @ED
                SetD Libre+2, D[Actual+2] @this
                SetD Libre+3, D[Actual+3]
                SetActual Libre
                setLibre Actual+6
                Jump D[VTB+1]
                SetD Actual-1, D[Libre-1] @return super.m1(max);
                SetLibre Libre-1
                Jump retM1C
thenM1C         SetD Actual+3, D[Actual+3]+((H[D[Actual+2]+1])*(H[D[Actual+2]+2])*(H[D[Actual+2]+3])) @max = max + (v1 * v2 * v3);
                SetD Actual-1, D[Actual+3]  @return max;
retM1C          SetLibre Actual                                     %Limpio la memoria del RA de m1
                SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
                Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno
 
 %%%-----------------------------------------------------------------------------               

 %%%----------------------------------CLASE D TRADUCCION-------------------------
%%%--------------------Traduccion de init de la clase D-------------------------
initD   SetD Libre, PC+6                                @PR
        SetD Libre+1, Actual                            @ED
        SetD Libre+2, D[Actual+2]                       @this

        SetActual Libre                                 %Actualizo actual para que arranque en el PR del RA
        SetLibre Actual+3                               %Actualizo libre para que apunte al fin del RA      
        Jump D[VTC]
        
        SetH D[Actual+2]+1, D[Actual+3]+D[Actual+4]+4       @v1 = x + y + 4
        SetH D[Actual+2]+4, D[Actual+3]                      @v4 = x
        SetH D[Actual+2]+5, D[Actual+3]+D[Actual+4]          @v5 = x+y

        SetH D[Actual+2]+6, PO          @o1 = new B()
        SetH PO, VTB                   @VTB %le agrego la VT al nuevo objeto
        SetPO PO+4                      %muevo el PO para que entre el INST de B

        SetD Libre ,PC+6 @PR
        SetD Libre+1, Actual @ED
        SetD Libre+2, H[D[Actual+2]+6] @this o1

        SetActual Libre
        SetLibre Actual+3

        Jump D[H[D[Actual+2]]]                     %salto al codigo de init B

        SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]

%%%--------------------Traduccion de m2 de la clase D-------------------------
m2D     SetLibre Libre+1                @return de m2
        SetD Libre, PC+7                 @PR
        SetD Libre+1, Actual               @ED
        SetD Libre+2, H[D[Actual+2] +6]      @this
        SetD Libre+3, H[D[Actual+2]+1] + H[D[Actual+2]+4] +((H[D[Actual+2]+5])/2)         @param=v1+v4+v5/2
        
        SetActual Libre
        SetLibre Actual+5               
        Jump D[H[D[Actual+2]]+3]
        SetD Actual+4, D[Libre-1]       @aux= o1.m2(v1+v4+v5/2)
        SetLibre Libre-1        
        SetLibre Libre+1                @return de m1
        SetD Libre, PC+7                 @PR
        SetD Libre+1, Actual            @ED
        SetD Libre+2, D[Actual+2]       @this
        SetD Libre+3, D[Actual+4]+ (11* H[D[Actual+2]+3]) @aux + 11*v3

        SetActual Libre
        SetLibre Actual+4
        Jump D[H[D[Actual+2]]+1]
        SetD Actual+3, D[Libre-1]       @j= this.m1(aux + 11*v3)
        SetLibre Libre-1
        SetD Actual-1, D[Actual+3]         @return j;
        SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]

%%%--------------------Traduccion de opD de la clase D-----------------------------------
opD     SetLibre Libre+1        @espacio de retorno de opD
        JumpT cod1, D[Actual+3] == 1 @num == 1
        JumpT cod2, D[Actual+3] == 2 @num == 2
        Jump default                   

cod1    SetD Actual-1,(D[Actual+3] + 10) @return num + 10
        Jump break

cod2    SetD Actual-1, (D[Actual+3] * 10) @return num + 10
        Jump break

default SetD Actual-1, D[Actual+3] @return num

break   SetLibre Actual
        SetActual D[Libre+1]
        Jump D[Libre]

%%%--------------------Traduccion de main de la clase Principal-------------------------
main    SetIn Actual+2 
        SetIn Actual+3
        %Creacion Objeto
        SetD Actual+4, PO
        SetH PO, VTD @VTD 
        SetPO PO+7
        %oa.opD
        SetLibre Libre+1
        SetD Libre, PC+7
        SetD Libre+1, Actual @ED
        SetD Libre+2,D[Actual+4] @this %referencia al oA
        SetD Libre+3,1 @num
        SetActual Libre
        SetLibre Actual+5
        Jump opD
        SetOut D[Libre-1]
        SetLibre Libre-1
        %oA.init(x1,x2);
        SetD Libre, PC+8   @PR
        SetD Libre+1, Actual @ED
        SetD Libre+2,D[Actual+4] @this %referencia al oA
        SetD Libre+3,D[Actual+2]@x1
        SetD Libre+4,D[Actual+3] @x2
        SetActual Libre
        SetLibre Actual+5
        Jump D[H[D[Actual+2]]+4]
        %oA.m2()

        SetLibre Libre+1
        SetD Libre, PC+6   @PR
        SetD Libre+1, Actual @ED
        SetD Libre+2,D[Actual+4] @this oA %referencia al oA
        SetActual Libre
        SetLibre Actual+5
        Jump D[H[D[Actual+2]]+2]
        SetOut D[Libre-1]
        SetLibre Libre-1
        SetLibre Actual                                 %Limpio la memoria del RA de main
        SetActual D[Libre+1]                            %Muevo Actual a donde tenia el enlase dinamico
        Jump D[Libre]                                   %Salto a la direccion de codigo que guarde en el puntero de retorno
 

