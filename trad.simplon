%%% Carga la VT de la clase A
        SetLabel VTA, Libre                                     %Creo la etiqueta para la VT de A
        SetD Libre, initA         @VTA: direccion de initA      %Pongo en la VTA la direccion la version de init que usa A (respetando el offset de met1!)
        SetD Libre+1, m1A       @VTA: direccion de m1A      %Pongo en la VTA la direccion la version de m1 que usa A (respetando el offset de met1!)
        SetD Libre+2, m2A        @VTA: direccion de m2A     %Pongo en la VTA la direccion la version de m2 que usa A(respetando el offset de met1!)
        SetLibre Libre+4                                        %Actualizo Libre segun el tamaño de la VTA
        SetActual Libre                                         %Actualizo actual tambien

%%% Carga la VT de la clase B
        SetLabel VTB, Libre                                  %Creo la etiqueta para la VT de B
        SetD Libre, initB       @VTB:direccion de initB
        SetD Libre+1, m1A       @VTB:direccion de m1A
        SetD libre+2, m2A        @VTB:direccion de m2A
         SetD Libre+3, m2B       @VTB:direccion de m2B
        SetD libre+4, VTA       @VTB:direccion de VTA
        SetLibre Libre+6                                        %Actualizo Libre segun el tamaño de la VTB
        SetActual Libre                                         %Actualizo actual tambien
%%% Carga la VT de la clase C
        SetLabel VTC, Libre                                     %Creo la etiqueta para la VT de C
        SetD Libre, initC         @VTC: direccion de initC      %Pongo en la VTA la direccion la version de init que usa C (respetando el offset de met1!)
        SetD Libre+1, m1C       @VTC: direccion de m1C      %Pongo en la VTA la direccion la version de m1 que usa C (respetando el offset de met1!)
        SetLibre Libre+3                                        %Actualizo Libre segun el tamaño de la VTC
        SetActual Libre                                         %Actualizo actual tambien
%%% Carga la VT de la clase D
        SetLabel VTD, Libre                                     %Creo la etiqueta para la VT de D
        SetD Libre, initD         @VTD: direccion de initD      %Pongo en la VTA la direccion la version de init que usa D (respetando el offset de met1!)
        SetD Libre+1, m2D       @VTD: direccion de m1D      %Pongo en la VTA la direccion la version de m2 que usa D (respetando el offset de met1!)
        SetLibre Libre+3                                        %Actualizo Libre segun el tamaño de la VTD
        SetActual Libre                                         %Actualizo actual tambien

%%% Carga la VT de la clase Principal
        SetLabel VTPrincipal, Libre                                     %Creo la etiqueta para la VT de D
        SetLibre Libre+1                                        %Actualizo Libre segun el tamaño de la VTD
        SetActual Libre                                         %Actualizo actual tambien


%%%-----------------------------------------------------------------------------

%%%-------------Codigo de Incializacion (Llamada a main)------------------------
%%% Llama a main y finaliza
        SetD Libre, pc+5            @PTR    %Guardo puntero de retorno caigo en ??
        SetD Libre+1, actual        @ED     %Guardo enlace dinamico %main es estatico asi que no tien this!                                    
        SetActual Libre                     %Muevo actual para que apunte al RA que acabo de crear para main
        SetLibre Actual+5                   %Muevo libre segun el tamaño del RA de main (considerando las vars locales)
        Jump Main                           %Salto al codigo de main
        Halt                                %Cuando termino de ejecutar main finalizo

%%%--------------------Traduccion de met1 de la clase A-------------------------
met1A   SetH D[Actual+2]+1, D[Actual+3]     @x=p            %Guardo el valor del parametro p en x  a traves de this en el RA
        SetH D[Actual+2]+2, D[Actual+3]*5   @y=p*5          %Guardo el valor del parametro p*5 en y  a traves de this en el RA
        SetLibre Actual                                     %Limpio la memoria del RA de met2
        SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
        Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno
%%%-----------------------------------------------------------------------------

%%%--------------------Traduccion de met1 de la clase A-------------------------
initA     SetH D[Actual+2]+1,2     @v1=2            %Guardo el valor del parametro p en x  a traves de this en el RA
        SetH D[Actual+2]+2,0  @v1=0         %Guardo el valor del parametro p*5 en y  a traves de this en el RA
        SetLibre Actual                                     %Limpio la memoria del RA de met2
        SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
        Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno
%%%-----------------------------------------------------------------------------


%%%--------------------Traduccion de met1 de la clase A-------------------------
met1A   SetD Actual+3,0     @i=0            %Guardo el valor del parametro p en x  a traves de this en el RA
        SetD Actual,1  @seguir=true         %Guardo el valor del parametro p*5 en y  a traves de this en el RA
        SetLibre Actual                                     %Limpio la memoria del RA de met2
        SetActual D[Libre+1]                                %Muevo Actual a donde tenia el enlase dinamico
        Jump D[Libre]                                       %Salto a la direccion de codigo que guarde en el puntero de retorno
%%%-----------------------------------------------------------------------------
